import requests
import argparse
import json

def main(ip, site_name):
    # Authenticate with the InsightVM API and get the site ID
    auth_url = "https://<INSIGHTVM_HOSTNAME_OR_IP>/api/3/sessions"
    auth_payload = {
        "username": "<USERNAME>",
        "password": "<PASSWORD>"
    }
    auth_headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    auth_response = requests.post(auth_url, json=auth_payload, headers=auth_headers)
    auth_token = auth_response.headers["Authorization"]

    if auth_response.status_code != 201:
        print(f"Error authenticating with InsightVM API: {auth_response.status_code} - {auth_response.reason}")
        return

    sites_url = "https://<INSIGHTVM_HOSTNAME_OR_IP>/api/3/sites"
    sites_headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": auth_token
    }
    sites_response = requests.get(sites_url, headers=sites_headers)

    if sites_response.status_code != 200:
        print(f"Error getting site list from InsightVM API: {sites_response.status_code} - {sites_response.reason}")
        return

    site = next((s for s in sites_response.json()["resources"] if s["name"] == site_name), None)

    if site is None:
        print(f"Site '{site_name}' not found")
        return

    # Start a discovery scan on the given IP address
    scans_url = "https://<INSIGHTVM_HOSTNAME_OR_IP>/api/3/scans"
    scans_headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": auth_token
    }
    scans_payload = {
        "engine_id": 1,
        "site_id": site["id"],
        "name": f"Discovery Scan for {ip}",
        "target": ip,
        "template": "discovery"
    }
    scans_response = requests.post(scans_url, json=scans_payload, headers=scans_headers)

    if scans_response.status_code != 201:
        print(f"Error starting discovery scan: {scans_response.status_code} - {scans_response.reason}")
        return

    scan_id = scans_response.json()["id"]
    print(f"Discovery scan started for IP {ip} with scan ID {scan_id}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Perform a discovery scan on a Nexpose InsightVM instance')
    parser.add_argument('ip', type=str, help='The IP address to scan')
    parser.add_argument('site_name', type=str, help='The name of the site to scan')
    args = parser.parse_args()

    main(args.ip, args.site_name)
