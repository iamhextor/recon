import concurrent.futures

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Get user input
username = input("Username (E-id): ")
password = getpass("Password: ")

# Read IPs from input file
with open("ips.txt", "r") as f:
    ips_to_search = [line.strip() for line in f.readlines()]

# API endpoint URLs
sites_url = "https://nespose_ip:port/api/3/sites?page=0&size=500&sort=id,asc"
site_targets_url = "https://nespose_ip:port/api/3/sites/{}/included_targets"

# Function to check if an IP is present in a given site
def check_site(ip, site_id):
    headers = {
        'Content-Type': "application/json",
    }
    url = site_targets_url.format(site_id)
    response = requests.get(url, headers=headers, auth=(username, password), verify=False)
    if response.status_code == 200:
        targets = response.json()
        for target in targets:
            if target.get('address') == ip:
                return site_id
    return None

# Main program
output = {}
with requests.Session() as session:
    session.auth = (username, password)
    session.verify = False

    # Get list of all sites
    sites_response = session.get(sites_url)
    sites_data = sites_response.json().get('sites', [])

    # Search for IPs in each site
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future_to_site = {}
        for site in sites_data:
            site_id = site.get('id')
            future_to_site[executor.submit(check_site, ips_to_search[0], site_id)] = site_id
        for future in concurrent.futures.as_completed(future_to_site):
            site_id = future_to_site[future]
            result = future.result()
            if result is not None:
                output[ips_to_search[0]] = site_id

# Print output
for ip, site_id in output.items():
    print(f"IP {ip} is present in site {site_id}")
