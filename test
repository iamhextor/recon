ips_file = "ips.txt"

def search_ip_in_site(site_id, ip):
    url = f"https://nespose_ip:port/api/3/sites/{site_id}/included_targets?page=0&size=500&sort=id,asc"
    headers = {
        'Content-Type': "application/json",
    }
    x = requests.get(url, headers=headers, auth=(username, password), verify=False)
    if x.status_code == 200:
        resources = x.json().get('resources', [])
        for resource in resources:
            if resource.get('address') == ip:
                return site_id
    return None

def search_ip_in_all_sites(ip):
    url = "https://nespose_ip:port/api/3/sites?page=0&size=500&sort=id,asc"
    headers = {
        'Content-Type': "application/json",
    }
    x = requests.get(url, headers=headers, auth=(username, password), verify=False)
    site_ids = []
    if x.status_code == 200:
        resources = x.json().get('resources', [])
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = []
            for resource in resources:
                site_id = resource.get('id')
                futures.append(executor.submit(search_ip_in_site, site_id, ip))
            for future in concurrent.futures.as_completed(futures):
                site_id = future.result()
                if site_id:
                    site_ids.append(site_id)
    return site_ids

# Searching asset in Nexpose
with open(ips_file, "r") as f:
    ips_to_search = f.readlines()
    for count, ip in enumerate(ips_to_search):
        ip = ip.strip()
        site_ids = search_ip_in_all_sites(ip)
        if site_ids:
            print(f"{ip} found in site(s) with id(s): {', '.join(str(site_id) for site_id in site_ids)}")
        else:
            print(f"{ip} not found in any site.")
